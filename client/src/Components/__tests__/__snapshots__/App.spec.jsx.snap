// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App App renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Header
          className="header"
          size="huge"
        >
          Tic Tac Toe
          <HeaderSubheader>
            Challenge your mates to a classic game of noughts and crosses!
          </HeaderSubheader>
        </Header>,
        <Segment
          id="player-initiation-segment"
        >
          <Modal
            closeOnDimmerClick={true}
            closeOnDocumentClick={false}
            dimmer={true}
            eventPool="Modal"
            onClose={[Function]}
            open={false}
            size="mini"
            trigger={
              <div
                className="button"
                onClick={[Function]}
                role="presentation"
              >
                <Button
                  animated="fade"
                  as="button"
                  color="red"
                >
                  <ButtonContent
                    visible={true}
                  >
                    Player 
                    <Icon
                      as="i"
                      name="remove"
                    />
                  </ButtonContent>
                  <ButtonContent
                    hidden={true}
                  >
                    Enter details
                  </ButtonContent>
                </Button>
              </div>
            }
          >
            <PlayerForm
              handleModalClose={[Function]}
              playerSymbol="X"
              updatePlayer={[Function]}
            />
          </Modal>
          <Modal
            closeOnDimmerClick={true}
            closeOnDocumentClick={false}
            dimmer={true}
            eventPool="Modal"
            onClose={[Function]}
            open={false}
            size="mini"
            trigger={
              <div
                className="button"
                onClick={[Function]}
                role="presentation"
              >
                <Button
                  animated="fade"
                  as="button"
                  color="violet"
                >
                  <ButtonContent
                    visible={true}
                  >
                    Player 
                    <Icon
                      as="i"
                      name="radio"
                    />
                  </ButtonContent>
                  <ButtonContent
                    hidden={true}
                  >
                    Enter details
                  </ButtonContent>
                </Button>
              </div>
            }
          >
            <PlayerForm
              handleModalClose={[Function]}
              playerSymbol="O"
              updatePlayer={[Function]}
            />
          </Modal>
        </Segment>,
        <Segment
          id="info-and-scoreboard"
        >
          <Grid
            columns={2}
            divided={true}
          >
            <GridColumn>
              <GameInfo
                activePlayer="playerX"
                playerO=""
                playerX=""
              />
            </GridColumn>
            <GridColumn>
              <Scoreboard
                gameOn={false}
              />
            </GridColumn>
          </Grid>
        </Segment>,
        null,
      ],
      "id": "body",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            "Tic Tac Toe",
            <HeaderSubheader>
              Challenge your mates to a classic game of noughts and crosses!
            </HeaderSubheader>,
          ],
          "className": "header",
          "size": "huge",
        },
        "ref": null,
        "rendered": Array [
          "Tic Tac Toe",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Challenge your mates to a classic game of noughts and crosses!",
            },
            "ref": null,
            "rendered": "Challenge your mates to a classic game of noughts and crosses!",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Modal
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              onClose={[Function]}
              open={false}
              size="mini"
              trigger={
                <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="red"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="remove"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>
              }
            >
              <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="X"
                updatePlayer={[Function]}
              />
            </Modal>,
            <Modal
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              onClose={[Function]}
              open={false}
              size="mini"
              trigger={
                <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="violet"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="radio"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>
              }
            >
              <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="O"
                updatePlayer={[Function]}
              />
            </Modal>,
          ],
          "id": "player-initiation-segment",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="X"
                updatePlayer={[Function]}
              />,
              "closeOnDimmerClick": true,
              "closeOnDocumentClick": false,
              "dimmer": true,
              "eventPool": "Modal",
              "onClose": [Function],
              "open": false,
              "size": "mini",
              "trigger": <div
                className="button"
                onClick={[Function]}
                role="presentation"
              >
                <Button
                  animated="fade"
                  as="button"
                  color="red"
                >
                  <ButtonContent
                    visible={true}
                  >
                    Player 
                    <Icon
                      as="i"
                      name="remove"
                    />
                  </ButtonContent>
                  <ButtonContent
                    hidden={true}
                  >
                    Enter details
                  </ButtonContent>
                </Button>
              </div>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "handleModalClose": [Function],
                "playerSymbol": "X",
                "updatePlayer": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="O"
                updatePlayer={[Function]}
              />,
              "closeOnDimmerClick": true,
              "closeOnDocumentClick": false,
              "dimmer": true,
              "eventPool": "Modal",
              "onClose": [Function],
              "open": false,
              "size": "mini",
              "trigger": <div
                className="button"
                onClick={[Function]}
                role="presentation"
              >
                <Button
                  animated="fade"
                  as="button"
                  color="violet"
                >
                  <ButtonContent
                    visible={true}
                  >
                    Player 
                    <Icon
                      as="i"
                      name="radio"
                    />
                  </ButtonContent>
                  <ButtonContent
                    hidden={true}
                  >
                    Enter details
                  </ButtonContent>
                </Button>
              </div>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "handleModalClose": [Function],
                "playerSymbol": "O",
                "updatePlayer": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Grid
            columns={2}
            divided={true}
          >
            <GridColumn>
              <GameInfo
                activePlayer="playerX"
                playerO=""
                playerX=""
              />
            </GridColumn>
            <GridColumn>
              <Scoreboard
                gameOn={false}
              />
            </GridColumn>
          </Grid>,
          "id": "info-and-scoreboard",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <GridColumn>
                <GameInfo
                  activePlayer="playerX"
                  playerO=""
                  playerX=""
                />
              </GridColumn>,
              <GridColumn>
                <Scoreboard
                  gameOn={false}
                />
              </GridColumn>,
            ],
            "columns": 2,
            "divided": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <GameInfo
                  activePlayer="playerX"
                  playerO=""
                  playerX=""
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "activePlayer": "playerX",
                  "playerO": "",
                  "playerX": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Scoreboard
                  gameOn={false}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "gameOn": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      null,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header
            className="header"
            size="huge"
          >
            Tic Tac Toe
            <HeaderSubheader>
              Challenge your mates to a classic game of noughts and crosses!
            </HeaderSubheader>
          </Header>,
          <Segment
            id="player-initiation-segment"
          >
            <Modal
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              onClose={[Function]}
              open={false}
              size="mini"
              trigger={
                <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="red"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="remove"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>
              }
            >
              <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="X"
                updatePlayer={[Function]}
              />
            </Modal>
            <Modal
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              onClose={[Function]}
              open={false}
              size="mini"
              trigger={
                <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="violet"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="radio"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>
              }
            >
              <PlayerForm
                handleModalClose={[Function]}
                playerSymbol="O"
                updatePlayer={[Function]}
              />
            </Modal>
          </Segment>,
          <Segment
            id="info-and-scoreboard"
          >
            <Grid
              columns={2}
              divided={true}
            >
              <GridColumn>
                <GameInfo
                  activePlayer="playerX"
                  playerO=""
                  playerX=""
                />
              </GridColumn>
              <GridColumn>
                <Scoreboard
                  gameOn={false}
                />
              </GridColumn>
            </Grid>
          </Segment>,
          null,
        ],
        "id": "body",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "Tic Tac Toe",
              <HeaderSubheader>
                Challenge your mates to a classic game of noughts and crosses!
              </HeaderSubheader>,
            ],
            "className": "header",
            "size": "huge",
          },
          "ref": null,
          "rendered": Array [
            "Tic Tac Toe",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Challenge your mates to a classic game of noughts and crosses!",
              },
              "ref": null,
              "rendered": "Challenge your mates to a classic game of noughts and crosses!",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Modal
                closeOnDimmerClick={true}
                closeOnDocumentClick={false}
                dimmer={true}
                eventPool="Modal"
                onClose={[Function]}
                open={false}
                size="mini"
                trigger={
                  <div
                    className="button"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <Button
                      animated="fade"
                      as="button"
                      color="red"
                    >
                      <ButtonContent
                        visible={true}
                      >
                        Player 
                        <Icon
                          as="i"
                          name="remove"
                        />
                      </ButtonContent>
                      <ButtonContent
                        hidden={true}
                      >
                        Enter details
                      </ButtonContent>
                    </Button>
                  </div>
                }
              >
                <PlayerForm
                  handleModalClose={[Function]}
                  playerSymbol="X"
                  updatePlayer={[Function]}
                />
              </Modal>,
              <Modal
                closeOnDimmerClick={true}
                closeOnDocumentClick={false}
                dimmer={true}
                eventPool="Modal"
                onClose={[Function]}
                open={false}
                size="mini"
                trigger={
                  <div
                    className="button"
                    onClick={[Function]}
                    role="presentation"
                  >
                    <Button
                      animated="fade"
                      as="button"
                      color="violet"
                    >
                      <ButtonContent
                        visible={true}
                      >
                        Player 
                        <Icon
                          as="i"
                          name="radio"
                        />
                      </ButtonContent>
                      <ButtonContent
                        hidden={true}
                      >
                        Enter details
                      </ButtonContent>
                    </Button>
                  </div>
                }
              >
                <PlayerForm
                  handleModalClose={[Function]}
                  playerSymbol="O"
                  updatePlayer={[Function]}
                />
              </Modal>,
            ],
            "id": "player-initiation-segment",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <PlayerForm
                  handleModalClose={[Function]}
                  playerSymbol="X"
                  updatePlayer={[Function]}
                />,
                "closeOnDimmerClick": true,
                "closeOnDocumentClick": false,
                "dimmer": true,
                "eventPool": "Modal",
                "onClose": [Function],
                "open": false,
                "size": "mini",
                "trigger": <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="red"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="remove"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "handleModalClose": [Function],
                  "playerSymbol": "X",
                  "updatePlayer": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <PlayerForm
                  handleModalClose={[Function]}
                  playerSymbol="O"
                  updatePlayer={[Function]}
                />,
                "closeOnDimmerClick": true,
                "closeOnDocumentClick": false,
                "dimmer": true,
                "eventPool": "Modal",
                "onClose": [Function],
                "open": false,
                "size": "mini",
                "trigger": <div
                  className="button"
                  onClick={[Function]}
                  role="presentation"
                >
                  <Button
                    animated="fade"
                    as="button"
                    color="violet"
                  >
                    <ButtonContent
                      visible={true}
                    >
                      Player 
                      <Icon
                        as="i"
                        name="radio"
                      />
                    </ButtonContent>
                    <ButtonContent
                      hidden={true}
                    >
                      Enter details
                    </ButtonContent>
                  </Button>
                </div>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "handleModalClose": [Function],
                  "playerSymbol": "O",
                  "updatePlayer": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Grid
              columns={2}
              divided={true}
            >
              <GridColumn>
                <GameInfo
                  activePlayer="playerX"
                  playerO=""
                  playerX=""
                />
              </GridColumn>
              <GridColumn>
                <Scoreboard
                  gameOn={false}
                />
              </GridColumn>
            </Grid>,
            "id": "info-and-scoreboard",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <GridColumn>
                  <GameInfo
                    activePlayer="playerX"
                    playerO=""
                    playerX=""
                  />
                </GridColumn>,
                <GridColumn>
                  <Scoreboard
                    gameOn={false}
                  />
                </GridColumn>,
              ],
              "columns": 2,
              "divided": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <GameInfo
                    activePlayer="playerX"
                    playerO=""
                    playerX=""
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "activePlayer": "playerX",
                    "playerO": "",
                    "playerX": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Scoreboard
                    gameOn={false}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "gameOn": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        null,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
