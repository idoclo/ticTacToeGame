// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PlayerForm renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PlayerForm
    handleModalClose={[Function]}
    playerSymbol="O"
    updatePlayer={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Header
          className="player-form-item"
          size="medium"
        >
          Please enter your details
          <HeaderSubheader>
            You will be player 
            <Icon
              as="i"
              name="radio"
            />
          </HeaderSubheader>
        </Header>,
        <Form
          as="form"
        >
          <ButtonGroup
            className="player-form-item"
          >
            <Button
              as="button"
              color="brown"
              id="buttonExisting"
              onClick={[Function]}
              value="existing"
            >
              Existing
            </Button>
            <ButtonOr />
            <Button
              as="button"
              color="grey"
              id="buttonNew"
              onClick={[Function]}
              value="new"
            >
              New
            </Button>
          </ButtonGroup>
          <FormInput
            as={[Function]}
            className="player-form-item"
            control={[Function]}
            id="player-form-input"
            label="Username"
            onChange={[Function]}
            placeholder="Enter username here ..."
          />
        </Form>,
        <Button
          as="button"
          className="player-form-item"
          id="buttonSubmitUsername"
          onClick={[Function]}
        >
          Enter
        </Button>,
        <Portal
          closeOnDocumentClick={true}
          closeOnEscape={true}
          eventPool="default"
          onClose={[Function]}
          open={false}
          openOnTriggerClick={true}
        >
          <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              That username already exists in the database.
            </Header>
            <p>
              Please select another username.
            </p>
          </Segment>
        </Portal>,
        <Portal
          closeOnDocumentClick={true}
          closeOnEscape={true}
          eventPool="default"
          onClose={undefined}
          open={false}
          openOnTriggerClick={true}
        >
          <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              Need to select existing or new player mate!
            </Header>
            <p>
              Please press one of the buttons to select.
            </p>
          </Segment>
        </Portal>,
        <Portal
          closeOnDocumentClick={true}
          closeOnEscape={true}
          eventPool="default"
          open={false}
          openOnTriggerClick={true}
        >
          <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              That username does not exist in the database.
            </Header>
            <p>
              Please either select the New option or enter an existing username.
            </p>
          </Segment>
        </Portal>,
      ],
      "className": "player-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            "Please enter your details",
            <HeaderSubheader>
              You will be player 
              <Icon
                as="i"
                name="radio"
              />
            </HeaderSubheader>,
          ],
          "className": "player-form-item",
          "size": "medium",
        },
        "ref": null,
        "rendered": Array [
          "Please enter your details",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                "You will be player ",
                <Icon
                  as="i"
                  name="radio"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              "You will be player ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "i",
                  "name": "radio",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "form",
          "children": Array [
            <ButtonGroup
              className="player-form-item"
            >
              <Button
                as="button"
                color="brown"
                id="buttonExisting"
                onClick={[Function]}
                value="existing"
              >
                Existing
              </Button>
              <ButtonOr />
              <Button
                as="button"
                color="grey"
                id="buttonNew"
                onClick={[Function]}
                value="new"
              >
                New
              </Button>
            </ButtonGroup>,
            <FormInput
              as={[Function]}
              className="player-form-item"
              control={[Function]}
              id="player-form-input"
              label="Username"
              onChange={[Function]}
              placeholder="Enter username here ..."
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Button
                  as="button"
                  color="brown"
                  id="buttonExisting"
                  onClick={[Function]}
                  value="existing"
                >
                  Existing
                </Button>,
                <ButtonOr />,
                <Button
                  as="button"
                  color="grey"
                  id="buttonNew"
                  onClick={[Function]}
                  value="new"
                >
                  New
                </Button>,
              ],
              "className": "player-form-item",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "button",
                  "children": "Existing",
                  "color": "brown",
                  "id": "buttonExisting",
                  "onClick": [Function],
                  "value": "existing",
                },
                "ref": null,
                "rendered": "Existing",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "button",
                  "children": "New",
                  "color": "grey",
                  "id": "buttonNew",
                  "onClick": [Function],
                  "value": "new",
                },
                "ref": null,
                "rendered": "New",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": [Function],
              "className": "player-form-item",
              "control": [Function],
              "id": "player-form-input",
              "label": "Username",
              "onChange": [Function],
              "placeholder": "Enter username here ...",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "button",
          "children": "Enter",
          "className": "player-form-item",
          "id": "buttonSubmitUsername",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Enter",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              That username already exists in the database.
            </Header>
            <p>
              Please select another username.
            </p>
          </Segment>,
          "closeOnDocumentClick": true,
          "closeOnEscape": true,
          "eventPool": "default",
          "onClose": [Function],
          "open": false,
          "openOnTriggerClick": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username already exists in the database.
              </Header>,
              <p>
                Please select another username.
              </p>,
            ],
            "style": Object {
              "left": "35%",
              "position": "fixed",
              "textAlign": "center",
              "top": "40%",
              "zIndex": 1000,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />,
                  "That username already exists in the database.",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "i",
                    "name": "warning",
                    "style": Object {
                      "color": "red",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "That username already exists in the database.",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Please select another username.",
              },
              "ref": null,
              "rendered": "Please select another username.",
              "type": "p",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              Need to select existing or new player mate!
            </Header>
            <p>
              Please press one of the buttons to select.
            </p>
          </Segment>,
          "closeOnDocumentClick": true,
          "closeOnEscape": true,
          "eventPool": "default",
          "onClose": undefined,
          "open": false,
          "openOnTriggerClick": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                Need to select existing or new player mate!
              </Header>,
              <p>
                Please press one of the buttons to select.
              </p>,
            ],
            "style": Object {
              "left": "35%",
              "position": "fixed",
              "textAlign": "center",
              "top": "40%",
              "zIndex": 1000,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />,
                  "Need to select existing or new player mate!",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "i",
                    "name": "warning",
                    "style": Object {
                      "color": "red",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "Need to select existing or new player mate!",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Please press one of the buttons to select.",
              },
              "ref": null,
              "rendered": "Please press one of the buttons to select.",
              "type": "p",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Segment
            style={
              Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              }
            }
          >
            <Header>
              <Icon
                as="i"
                name="warning"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              That username does not exist in the database.
            </Header>
            <p>
              Please either select the New option or enter an existing username.
            </p>
          </Segment>,
          "closeOnDocumentClick": true,
          "closeOnEscape": true,
          "eventPool": "default",
          "open": false,
          "openOnTriggerClick": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username does not exist in the database.
              </Header>,
              <p>
                Please either select the New option or enter an existing username.
              </p>,
            ],
            "style": Object {
              "left": "35%",
              "position": "fixed",
              "textAlign": "center",
              "top": "40%",
              "zIndex": 1000,
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />,
                  "That username does not exist in the database.",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "i",
                    "name": "warning",
                    "style": Object {
                      "color": "red",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "That username does not exist in the database.",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Please either select the New option or enter an existing username.",
              },
              "ref": null,
              "rendered": "Please either select the New option or enter an existing username.",
              "type": "p",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header
            className="player-form-item"
            size="medium"
          >
            Please enter your details
            <HeaderSubheader>
              You will be player 
              <Icon
                as="i"
                name="radio"
              />
            </HeaderSubheader>
          </Header>,
          <Form
            as="form"
          >
            <ButtonGroup
              className="player-form-item"
            >
              <Button
                as="button"
                color="brown"
                id="buttonExisting"
                onClick={[Function]}
                value="existing"
              >
                Existing
              </Button>
              <ButtonOr />
              <Button
                as="button"
                color="grey"
                id="buttonNew"
                onClick={[Function]}
                value="new"
              >
                New
              </Button>
            </ButtonGroup>
            <FormInput
              as={[Function]}
              className="player-form-item"
              control={[Function]}
              id="player-form-input"
              label="Username"
              onChange={[Function]}
              placeholder="Enter username here ..."
            />
          </Form>,
          <Button
            as="button"
            className="player-form-item"
            id="buttonSubmitUsername"
            onClick={[Function]}
          >
            Enter
          </Button>,
          <Portal
            closeOnDocumentClick={true}
            closeOnEscape={true}
            eventPool="default"
            onClose={[Function]}
            open={false}
            openOnTriggerClick={true}
          >
            <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username already exists in the database.
              </Header>
              <p>
                Please select another username.
              </p>
            </Segment>
          </Portal>,
          <Portal
            closeOnDocumentClick={true}
            closeOnEscape={true}
            eventPool="default"
            onClose={undefined}
            open={false}
            openOnTriggerClick={true}
          >
            <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                Need to select existing or new player mate!
              </Header>
              <p>
                Please press one of the buttons to select.
              </p>
            </Segment>
          </Portal>,
          <Portal
            closeOnDocumentClick={true}
            closeOnEscape={true}
            eventPool="default"
            open={false}
            openOnTriggerClick={true}
          >
            <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username does not exist in the database.
              </Header>
              <p>
                Please either select the New option or enter an existing username.
              </p>
            </Segment>
          </Portal>,
        ],
        "className": "player-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              "Please enter your details",
              <HeaderSubheader>
                You will be player 
                <Icon
                  as="i"
                  name="radio"
                />
              </HeaderSubheader>,
            ],
            "className": "player-form-item",
            "size": "medium",
          },
          "ref": null,
          "rendered": Array [
            "Please enter your details",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  "You will be player ",
                  <Icon
                    as="i"
                    name="radio"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                "You will be player ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "i",
                    "name": "radio",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "form",
            "children": Array [
              <ButtonGroup
                className="player-form-item"
              >
                <Button
                  as="button"
                  color="brown"
                  id="buttonExisting"
                  onClick={[Function]}
                  value="existing"
                >
                  Existing
                </Button>
                <ButtonOr />
                <Button
                  as="button"
                  color="grey"
                  id="buttonNew"
                  onClick={[Function]}
                  value="new"
                >
                  New
                </Button>
              </ButtonGroup>,
              <FormInput
                as={[Function]}
                className="player-form-item"
                control={[Function]}
                id="player-form-input"
                label="Username"
                onChange={[Function]}
                placeholder="Enter username here ..."
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Button
                    as="button"
                    color="brown"
                    id="buttonExisting"
                    onClick={[Function]}
                    value="existing"
                  >
                    Existing
                  </Button>,
                  <ButtonOr />,
                  <Button
                    as="button"
                    color="grey"
                    id="buttonNew"
                    onClick={[Function]}
                    value="new"
                  >
                    New
                  </Button>,
                ],
                "className": "player-form-item",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "button",
                    "children": "Existing",
                    "color": "brown",
                    "id": "buttonExisting",
                    "onClick": [Function],
                    "value": "existing",
                  },
                  "ref": null,
                  "rendered": "Existing",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "button",
                    "children": "New",
                    "color": "grey",
                    "id": "buttonNew",
                    "onClick": [Function],
                    "value": "new",
                  },
                  "ref": null,
                  "rendered": "New",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": [Function],
                "className": "player-form-item",
                "control": [Function],
                "id": "player-form-input",
                "label": "Username",
                "onChange": [Function],
                "placeholder": "Enter username here ...",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "children": "Enter",
            "className": "player-form-item",
            "id": "buttonSubmitUsername",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Enter",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username already exists in the database.
              </Header>
              <p>
                Please select another username.
              </p>
            </Segment>,
            "closeOnDocumentClick": true,
            "closeOnEscape": true,
            "eventPool": "default",
            "onClose": [Function],
            "open": false,
            "openOnTriggerClick": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Header>
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />
                  That username already exists in the database.
                </Header>,
                <p>
                  Please select another username.
                </p>,
              ],
              "style": Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <Icon
                      as="i"
                      name="warning"
                      style={
                        Object {
                          "color": "red",
                        }
                      }
                    />,
                    "That username already exists in the database.",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "i",
                      "name": "warning",
                      "style": Object {
                        "color": "red",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "That username already exists in the database.",
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Please select another username.",
                },
                "ref": null,
                "rendered": "Please select another username.",
                "type": "p",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                Need to select existing or new player mate!
              </Header>
              <p>
                Please press one of the buttons to select.
              </p>
            </Segment>,
            "closeOnDocumentClick": true,
            "closeOnEscape": true,
            "eventPool": "default",
            "onClose": undefined,
            "open": false,
            "openOnTriggerClick": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Header>
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />
                  Need to select existing or new player mate!
                </Header>,
                <p>
                  Please press one of the buttons to select.
                </p>,
              ],
              "style": Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <Icon
                      as="i"
                      name="warning"
                      style={
                        Object {
                          "color": "red",
                        }
                      }
                    />,
                    "Need to select existing or new player mate!",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "i",
                      "name": "warning",
                      "style": Object {
                        "color": "red",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "Need to select existing or new player mate!",
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Please press one of the buttons to select.",
                },
                "ref": null,
                "rendered": "Please press one of the buttons to select.",
                "type": "p",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Segment
              style={
                Object {
                  "left": "35%",
                  "position": "fixed",
                  "textAlign": "center",
                  "top": "40%",
                  "zIndex": 1000,
                }
              }
            >
              <Header>
                <Icon
                  as="i"
                  name="warning"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
                That username does not exist in the database.
              </Header>
              <p>
                Please either select the New option or enter an existing username.
              </p>
            </Segment>,
            "closeOnDocumentClick": true,
            "closeOnEscape": true,
            "eventPool": "default",
            "open": false,
            "openOnTriggerClick": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Header>
                  <Icon
                    as="i"
                    name="warning"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />
                  That username does not exist in the database.
                </Header>,
                <p>
                  Please either select the New option or enter an existing username.
                </p>,
              ],
              "style": Object {
                "left": "35%",
                "position": "fixed",
                "textAlign": "center",
                "top": "40%",
                "zIndex": 1000,
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <Icon
                      as="i"
                      name="warning"
                      style={
                        Object {
                          "color": "red",
                        }
                      }
                    />,
                    "That username does not exist in the database.",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "i",
                      "name": "warning",
                      "style": Object {
                        "color": "red",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "That username does not exist in the database.",
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Please either select the New option or enter an existing username.",
                },
                "ref": null,
                "rendered": "Please either select the New option or enter an existing username.",
                "type": "p",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
